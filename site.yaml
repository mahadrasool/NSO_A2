---
- name: Deploy HAproxy and Flask app
  hosts: haproxy
  become: true
  gather_facts: true

  vars:
    haproxy_ip: "{{ hostvars['haproxy']['ansible_host'] }}"
    devA_ip: "{{ hostvars['devA']['ansible_host'] }}"
    devB_ip: "{{ hostvars['devB']['ansible_host'] }}"
    devC_ip: "{{ hostvars['devC']['ansible_host'] }}"

  tasks:
  - name: Install HAproxy
    apt:
      name: haproxy
      state: latest

  - name: Configure HAproxy
    copy:
      src: haproxy.cfg
      dest: /etc/haproxy/haproxy.cfg
      mode: '0644'

  - name: Start HAproxy
    service:
      name: haproxy
      state: started

- name: Deploy Flask app on dev servers
  hosts: webservers
  become: true
  gather_facts: true

  tasks:
  - name: Install Python3 and pip3
    apt:
      name:
        - python3
        - python3-pip
      state: latest

  - name: Install Flask and gunicorn
    pip:
      name:
        - flask
        - gunicorn

  - name: Copy Flask app to dev servers
    copy:
      src: application2.py
      dest: /home/ubuntu/application2.py
      mode: '0644'

  - name: Start Flask app using gunicorn
    shell: "cd /home/ubuntu && gunicorn -b 0.0.0.0:5000 application2:app -D"

- name: Verify that HAproxy is balancing load across devA, devB, and devC
  hosts: haproxy
  gather_facts: no

  tasks:
  - name: Verify that HAproxy is balancing load across devA, devB, and devC
    shell: |
      for i in {1..3}; do curl -s http://{{ haproxy_ip }}:5000; done | sort | uniq | grep "devA\|devB\|devC"
    register: result

  - name: Print verification results
    debug:
      var: result.stdout_lines
